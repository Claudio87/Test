// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class HelloWorld {
    static Map<String, Map<String,Double>> storage = new HashMap<>();
    static Deque<String> parents = new LinkedList<>();
    static Map<String, Map<String,Double>> result = new HashMap<>();
    static Map<String,String> processed = new HashMap();
    public HelloWorld(){
        Map<String,Double> book = new HashMap<>();
        book.put("Plate",5.0);
        book.put("Poster", 0.0);
        storage.put("Book",book);
        Map<String,Double> plate = new HashMap<>();
        plate.put("Guitar",15.0);
        plate.put("Drum",20.0);
        storage.put("Plate",plate);
        Map<String,Double> poster = new HashMap<>();
        poster.put("Guitar",30.0);
        poster.put("Drum",35.0);
        storage.put("Poster",poster);
        Map<String,Double> guitar = new HashMap<>();
        guitar.put("Piano",20.0);
        storage.put("Guitar",guitar);
        Map<String,Double> drum = new HashMap<>();
        drum.put("Piano",10.0);
        storage.put("Drum",drum);
    }
    public static void main(String[] args) {
    //   int index = 0;
        HelloWorld hw = new HelloWorld();
        String currentParent = "Book";
        parents.add(currentParent);
        
        Map<String, Double> currentMap;
        String parentPointerPrev = "";
        int index = 0;
        while(index != 6){
            String currentChild = "";
            // print();
            // parentPointerPrev = currentParent;
            // System.out.println("1: " + currentParent);
            if(parents.size() == 0){ parents.add("Book");}
            currentParent = parents.getFirst();
            System.out.println("2: " + currentParent);
            //  System.out.println("Parent: "+currentParent+"\n");
            //  System.out.println("PrevParent: "+parentPointerPrev+"\n");
            currentMap = storage.get(currentParent);
            double value = Double.POSITIVE_INFINITY;
            
            Iterator<String> it = currentMap.keySet().iterator();
            while(it.hasNext()){
                String child = it.next();
                // value = currentMap.get(child);
                if(!(processed.containsValue(child) & processed.containsKey(currentParent)) 
                && currentMap.get(child) < value){
                    value = currentMap.get(child);
                    currentChild = child;
                }
            }
            processed.put(currentParent,currentChild);    
                
                // System.out.println("Child: "+child);
                // object in result and currentParent are not the same. Seems like by the time we've got object differs from Book 
                // the result Map doesn't contain the object we are trying to refer to
                if(!currentParent.equals("Book")){
                    //  System.out.println("PrevParent: "+parentPointerPrev+" - "+"CurrentParent: " +currentParent);
                    value += result.get(currentParent).get(parentPointerPrev);
                }
                Map<String, Double> bufferMap = new HashMap<>();
                bufferMap.put(currentParent, value);
                result.put(currentChild, bufferMap);
                if(!currentChild.equals("Piano")){
                    parents.add(currentChild);
                }
               
                parents.removeFirst();
            
            parentPointerPrev = currentParent;
            index++;
        }
        // printProcessed();
        // System.out.println(parents);
        printResult();
    }
    
    
    public static void print(){
        System.out.println(result);
    }
    
    public static void printResult(){
        System.out.println(result);
    }
    
    public static void printProcessed(){
        System.out.println(processed);
    }
}
//new
 public void testStart(){
        Deque<String> parents = new LinkedList<>();
        String currentParent = "Book";
        parents.add(currentParent);
        int index = 0;
        while(index != 8){
            currentParent = parents.getFirst();
            System.out.println("currentParent: "+currentParent);
            Map<String, Double> map = storage.get(currentParent);
            Iterator<String> iterator = map.keySet().iterator();
            while(iterator.hasNext()){
                String child = iterator.next();
                double value = map.get(child);
                if(currentParent.equals("Book")){
                    parParents.put(child,currentParent);
                    costs.put(child, value);
                }
                else if(!parParents.containsKey(child)){
                    parParents.put(child, currentParent);
                    value += costs.get(currentParent);
                    costs.put(child,value);
                }
                else if(value < costs.get(child)){
                    costs.put(child,value);
                    parParents.put(child,currentParent);
                }
                parents.pollFirst();
                if(child.equals("Piano")){
                    child = "Book";
                }
                parents.add(child);
            }
            index++;
        }
        System.out.println(costs);
        System.out.println("----------------");
        System.out.println(parParents);
    }


//end new

       
//        storage.put("book", (Map<String, Double>) new HashMap<>().put("plate",5.0));
        
        
        
        
